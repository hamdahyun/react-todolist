{"version":3,"sources":["components/simpleHabit.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["SimpleHabit","props","useState","count","setCount","spanRef","useRef","handleIncrement","useCallback","useEffect","console","log","className","ref","onClick","Navbar","this","totalCount","Component","App","state","habits","id","name","habit","map","item","setState","handleDecrement","handleDelete","filter","handleAdd","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAkCeA,EAhCK,SAACC,GAQlB,MAA2BC,mBAAS,GAApC,mBAAOC,EAAP,KAAcC,EAAd,KAEOC,EAAUC,mBAGXC,EAAkBC,uBAAY,WACjCJ,EAASD,EAAQ,MAOpB,OAJCM,qBAAU,WACNC,QAAQC,IAAR,8BAAmCR,MACpC,CAACA,IAGF,qBAAIS,UAAU,QAAd,UACG,sBAAMC,IAAKR,EAASO,UAAU,aAA9B,qBACA,sBAAMA,UAAU,gBAAhB,SAAiCT,IACjC,wBAAQS,UAAU,8BAA8BE,QAASP,EAAzD,mBCdMQ,E,4JAVf,WACI,OACE,sBAAKH,UAAU,SAAf,UACI,mBAAGA,UAAU,4BACb,6DACA,sBAAMA,UAAU,eAAhB,SAAgCI,KAAKf,MAAMgB,oB,GANhCC,aCuENC,E,4MAjEbC,MAAO,CACLC,OAAS,CACP,CAACC,GAAI,EAAGC,KAAM,UAAWpB,MAAO,GAChC,CAACmB,GAAI,EAAGC,KAAM,UAAWpB,MAAO,GAChC,CAACmB,GAAI,EAAGC,KAAM,SAAUpB,MAAO,K,EAInCI,gBAAkB,SAACiB,GAGjB,IAAMH,EAAS,EAAKD,MAAMC,OAAOI,KAAI,SAAAC,GACnC,OAAGA,EAAKJ,KAAOE,EAAMF,GACZ,2BAAIE,GAAX,IAAkBrB,MAAOqB,EAAMrB,MAAO,IAEjCuB,KAET,EAAKC,SAAS,CAAEN,Y,EAElBO,gBAAkB,SAACJ,GACjB,IAAMH,EAAS,EAAKD,MAAMC,OAAOI,KAAI,SAAAC,GACnC,GAAGA,EAAKJ,KAAOE,EAAMF,GAAG,CACtB,IAAMnB,EAAQqB,EAAMrB,MAAO,EAC3B,OAAO,2BAAIqB,GAAX,IAAkBrB,MAAOA,EAAQ,EAAI,EAAIA,IAE3C,OAAOuB,KAET,EAAKC,SAAS,CAAEN,Y,EAGlBQ,aAAe,SAACL,GACd,IAAMH,EAAS,EAAKD,MAAMC,OAAOS,QAAO,SAAAJ,GAAI,OAAIA,EAAKJ,KAAOE,EAAMF,MAClE,EAAKK,SAAS,CAACN,Y,EAEjBU,UAAY,SAAAR,GACV,IAAMF,EAAM,sBAAO,EAAKD,MAAMC,QAAlB,CAA0B,CAACC,GAAIU,KAAKC,MAAOV,OAAMpB,MAAO,KACpE,EAAKwB,SAAS,CAACN,Y,EAEjBa,YAAc,WACZ,IAAMb,EAAS,EAAKD,MAAMC,OAAOI,KAAI,SAAAD,GAEnC,OAAoB,IAAhBA,EAAMrB,MACD,2BAAIqB,GAAX,IAAkBrB,MAAQ,IAErBqB,KAET,EAAKG,SAAS,CAAEN,Y,4CAElB,WACE,OACE,qCACE,cAAC,EAAD,CAAQJ,WAAYD,KAAKI,MAAMC,OAAOS,QAAO,SAAAJ,GAAI,OAAIA,EAAKvB,MAAQ,KAAGgC,SASrE,cAAC,EAAD,W,GA7DUjB,a,MCDlBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2afba478.chunk.js","sourcesContent":["import React, { useState, useRef, useCallback, useEffect} from 'react'\n\nconst SimpleHabit = (props) => {\n    // !정말 중요\n    // ** 클래스와 다르게 prop이나 state가 변경이 되면 전체가 반복이 되어짐\n    // onclick에 전달한 콜백함수는 새로운 함수가 만들어지고 함수도 오브젝트 중에 하나이기 때문에 컴포넌트가 업데이트 될때 마다 계속 새롭게 만들고 새롭게 값을 계산함.\n    // ?? useState는 업데이트 되어도 계속 기억하는건 왜 그런거졍??? \n    // : useState를 쓰면 리액트가 알아서 기억하고 있기 때문에 많이 호출해도 따로 저장이 되어 있기 때문에 \"동일한 값을 받아옴\" \"메모리의 값을 저장해둠~\" \n\n    // state를 설정하고 업데이트하는 state를 가져올 수 있다.\n   const [count, setCount ] = useState(0)\n    // const spanRef = React.createRef(); 매번새로운 것을 만들어줌.\n    const spanRef = useRef(); // 한번만 만들고 사용. \n\n\n   const handleIncrement = useCallback(() => {\n      setCount(count + 1)\n   })\n\n    useEffect(() => {\n        console.log(`mounted $ updated!: ${count}`)\n    }, [count]) // 두번째 인자 값이 변경되었을때만 함수가 호출되도록.\n\n   return (\n      <li className=\"habit\">\n         <span ref={spanRef} className=\"habit-name\">Reading</span>\n         <span className=\"habit-counter\">{count}</span>\n         <button className=\"habit-button habit-increase\" onClick={handleIncrement}>\n         +\n         </button>\n      </li>\n      )\n}\n\nexport default SimpleHabit;","import React, { Component } from 'react';\n\nclass Navbar extends Component {\nrender() {\n    return (\n      <div className=\"navbar\">\n          <i className=\"navbar-logo fas fa-leaf\"></i>\n          <span>Dahyun's Habit Tracker :)</span>\n          <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </div>\n    )\n  }\n}\nexport default Navbar;","\nimport React, { Component } from 'react';\nimport './app.css';\n// import Habit from './components/habit';\nimport SimpleHabit from './components/simpleHabit';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state ={\n    habits : [\n      {id: 1, name: 'Reading', count: 0},\n      {id: 2, name: 'Running', count: 0},\n      {id: 3, name: 'coding', count: 0},\n    ]\n  }\n  \n  handleIncrement = (habit) => {\n    // 변화하는 오브젝트를 따로 빼서 전달.\n    // 다시 새로운 오브젝트를 만드는것이 더 좋다.\n    const habits = this.state.habits.map(item => {\n      if(item.id === habit.id){\n        return {...habit, count: habit.count +1 }\n      } \n      return item;\n    })\n    this.setState({ habits });\n  };\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map(item => {\n      if(item.id === habit.id){\n        const count = habit.count -1 ;\n        return {...habit, count: count < 0 ? 0 : count }\n      } \n      return item;\n    })\n    this.setState({ habits });\n   \n  };\n  handleDelete = (habit) => {\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({habits});\n  };\n  handleAdd = name => {\n    const habits = [...this.state.habits, {id: Date.now(), name, count: 0}]\n    this.setState({habits});\n  }\n  handleReset = () =>{\n    const habits = this.state.habits.map(habit => {\n      // return {...habit, count : 0 }; //전부다 업데이트 된다.\n      if (habit.count !== 0 ) {\n        return {...habit, count : 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  }\n  render() {\n    return (\n      <>\n        <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length} />\n        {/* <Habit \n        habits={this.state.habits} \n        onIncrement={this.handleIncrement} \n        onDecrement={this.handleDecrement} \n        onDelete={this.handleDelete}\n        onAdd={this.handleAdd}\n        onReset={this.handleReset}\n        /> */}\n        <SimpleHabit />\n      </>\n    )\n  }\n}\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}